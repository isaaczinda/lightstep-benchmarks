version: 2

# executors:
#   python-executor:
#     docker:
#       - image: circleci/python:3.7.4
#     working_directory: ~/repo

jobs:
  build:
    docker:
      - image: circleci/python:3.7.4
    working_directory: ~/repo

    steps:
      # checkout project code into working directory (~/repo)
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install pip dependencies
          command: |
            python -m venv venv
            . venv/bin/activate
            pip install --upgrade pip==19.1.* setuptools==41.0.*
            pip install -r requirements.txt

      - run: ./scripts/install-protobuf.sh
      - run: ./scripts/compile-proto.sh
      - run: sudo ./scripts/install-bazel.sh

      - run:
          name: checkout & install tracers
          command: |
            source venv/bin/activate
            source ./scripts/install-python-cpp-tracer.sh
            source ./scripts/install-python-tracer.sh

      # now that we have installed
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # cache the sidecar build because this is fairly time-consuming
      - restore_cache:
          keys:
            - sidecar-build

      - run: cd sidecar; bazel build //:sidecar

      - save_cache:
          paths:
            - ./sidecar/bazel-temp
          key: sidecar-build

      - run: mkdir graphs

      - persist_to_workspace:
          root: ~/repo
          paths:
            - "*"

  test:
    docker:
      - image: circleci/python:3.7.4
    working_directory: ~/repo

    steps:
      - attach_workspace:
          at: ~/

      - run:
          name: run tests
          command: |
            . venv/bin/activate
            pytest test.py

      - store_artifacts:
          path: logs
          destination: logs

  make_memory_graphs:
    docker:
      - image: circleci/python:3.7.4
    working_directory: ~/repo

    steps:
      - attach_workspace:
          at: ~/

      - run:
          name: make graphs
          command: |
            . venv/bin/activate
            ./sidecar/bazel-bin/sidecar &
            python memory_graphs.py python
            python memory_graphs.py python-cpp
            python memory_graphs.py python-sidecar

      - store_artifacts:
          path: logs
          destination: logs

      - store_artifacts:
          path: graphs
          destination: graphs

  make_dropped_graphs:
    docker:
      - image: circleci/python:3.7.4
    working_directory: ~/repo

    steps:
      - attach_workspace:
          at: ~/

      - run:
          name: make graphs
          command: |
            . venv/bin/activate
            ./sidecar/bazel-bin/sidecar &
            python dropped_graphs.py python
            python dropped_graphs.py python-cpp
            python dropped_graphs.py python-sidecar

      - store_artifacts:
          path: logs
          destination: logs

      - store_artifacts:
          path: graphs
          destination: graphs

  make_satellite_disconnect_graphs:
    docker:
      - image: circleci/python:3.7.4
    working_directory: ~/repo

    steps:
      - attach_workspace:
          at: ~/

      - run:
          name: make graphs
          command: |
            . venv/bin/activate
            python satellite_disconnect_graphs.py python
            python satellite_disconnect_graphs.py python-cpp

      - store_artifacts:
          path: logs
          destination: logs

      - store_artifacts:
          path: graphs
          destination: graphs

  make_cpu_graphs:
    docker:
      - image: circleci/python:3.7.4
    working_directory: ~/repo

    steps:
      - attach_workspace:
          at: ~/

      - run:
          name: make graphs
          command: |
            . venv/bin/activate
            ./sidecar/bazel-bin/sidecar &
            python cpu_graphs.py python
            python cpu_graphs.py python-cpp
            python cpu_graphs.py python-sidecar

      - store_artifacts:
          path: logs
          destination: logs

      - store_artifacts:
          path: graphs
          destination: graphs

workflows:
  version: 2

  # build, then run regression tests whenever there is a commit
  build_test:
    jobs:
      - build
      - test:
          requires:
            - build

  # build, then simultaneously test and generate all graphs
  build_graphs:
    triggers: #use the triggers key to indicate a scheduled build
      - schedule:
          cron: "0 5 31 2 *" # runs feb 31st (AKA NEVER)

    jobs:
      - build
      - make_memory_graphs:
          requires:
            - build
      - make_dropped_graphs:
          requires:
            - build
      - make_satellite_disconnect_graphs:
          requires:
            - build
      - make_cpu_graphs:
          requires:
            - build
